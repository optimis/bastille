#!/usr/bin/env ruby
# vim:set ft=ruby:


require 'rubygems'
require 'bundler/setup'
require 'thor'
require 'highline'
require 'octokit'

module Bastille
  class CLI < Thor
    desc :tokenize, 'Generates an OAuth token from github to authenticate against Bastille'
    def tokenize
      say 'Searching for local token...', :green
      if store.exist?
        say 'Found a local token in ~/.bastille. Aborting new token generation. Delete ~/.bastille and run this command again to generate a new token.', :yellow
      else
        say "No local token found. Let's make a new one :)", :yellow
        if yes? 'This action will require you to authenticate with Github. Are you sure you want to generate a new token?', :red
          username = ask 'Github username: '
          password = ask 'Password: ' do |q|
            q.echo = false
          end
          if store.generate(username, password)
            say 'Your token has been generated and authorized with github. It is stored in ~/.bastille. <3', :green
          else
            say 'The username and password entered do not match. Sorry. :(', :red
          end
        end
      end
    end

    desc :authenticate, 'Authenticates your user with Github'
    def authenticate
      if store.exist?
        say 'Authenticating your user with Github...', :green
        if store.authenticate
          say 'Successfully authenticated with Github. \m/', :green
        else
          say "Github says you aren't who you say you are. o_O", :red
        end
      else
        say 'Could not authenticate you with Github. There is no token at ~/.bastille. Try running `bastille tokenize` to generate a new token.', :red
      end
    end

    desc :credentials, 'Prints your credentials out to the commandline'
    def credentials
      say("Username: #{store.username}")
      say("Token: #{store.token}")
    end

    private

    def ask(*args, &block)
      highline.ask(*args, &block)
    end

    def store
      @store ||= Store.new
    end

    def highline
      @highline ||= HighLine.new
    end

  end

  class Store

    def exist?
      pathname.exist?
    end

    def generate(username, password)
      @client = Octokit::Client.new(:login => username, :password => password)
      auth = @client.create_authorization(:scopes => [], :note => 'Bastille', :note_url => 'https://optimis-bastille.herokuapp.com')
      record_token(username, auth.token)
      true
    rescue Octokit::Unauthorized
      false
    end

    def record_token(username, token)
      hash = { :username => username, :token => token }
      pathname.open('w+') do |f|
        f.write(YAML.dump(hash))
      end
    end

    def authenticate
      @client = Octokit::Client.new(:login => username, :oauth => token)
      @client.organization_member?('optimis', username)
    rescue Octokit::Unauthorized
      false
    end

    def username
      store[:username]
    end

    def token
      store[:token]
    end

    def store
      @store ||= begin
        pathname.open('r') do |f|
          YAML.load(f.read)
        end
      end
    end

    def pathname
      @pathname ||= Pathname.new(path)
    end

    def path
      "#{ENV['HOME']}/.bastille"
    end

  end
end

Bastille::CLI.start
